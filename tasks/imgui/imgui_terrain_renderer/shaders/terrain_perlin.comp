#version 450

layout(local_size_x = 32, local_size_y = 32) in;
layout(binding = 0, r32f) restrict writeonly uniform image2D resultImage;
layout(binding = 1, std430) restrict readonly buffer PerlinParamsBuffer {
    int octaves;
    float amplitude;
    float frequencyMultiplier;
    float scale;
} perlinParams;

vec2 hash22(vec2 p) {
  p = vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)));
  return -1.0 + 2.0 * fract(sin(p) * 43758.5453123);
}

vec2 quintic(vec2 t) {
  return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}

float gradientNoise(vec2 p) {
  vec2 i = floor(p);
  vec2 f = fract(p);

  vec2 g00 = hash22(i + vec2(0.0, 0.0));
  vec2 g10 = hash22(i + vec2(1.0, 0.0));
  vec2 g01 = hash22(i + vec2(0.0, 1.0));
  vec2 g11 = hash22(i + vec2(1.0, 1.0));

  float n00 = dot(g00, f - vec2(0.0, 0.0));
  float n10 = dot(g10, f - vec2(1.0, 0.0));
  float n01 = dot(g01, f - vec2(0.0, 1.0));
  float n11 = dot(g11, f - vec2(1.0, 1.0));

  vec2 u = quintic(f);

  return mix(mix(n00, n10, u.x), mix(n01, n11, u.x), u.y);
}

float fbm(vec2 p) {
  float value = 0.0;
  float amplitude = perlinParams.amplitude;
  float frequency = 1.0;
  float maxValue = 0.0;

  for (int i = 0; i < perlinParams.octaves; i++) {
    value += amplitude * gradientNoise(p * frequency);
    maxValue += amplitude;
    amplitude *= 0.5;
    frequency *= perlinParams.frequencyMultiplier;
  }

  return value / maxValue;
}

void main() {
  uvec2 idxy = gl_GlobalInvocationID.xy;

  if (idxy.x >= 4096 || idxy.y >= 4096) return;
  vec2 st = vec2(idxy) / 4096.0;

  float noise = fbm(st * perlinParams.scale) * 0.5 + 0.5;
  float result = noise + 0.5;
  imageStore(resultImage, ivec2(idxy), vec4(result));
}