#version 430

layout(local_size_x = 32, local_size_y = 32) in;

layout(binding = 0, rgba8) uniform image2D resultImage;

float hash(vec2 p) {
    p = fract(p * 0.3183099 + 0.1);
    p *= 17.0;
    return fract(p.x * p.y * (p.x + p.y));
}

float valueNoise(vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);
    float a = hash(i);
    float b = hash(i + vec2(1.0, 0.0));
    float c = hash(i + vec2(0.0, 1.0));
    float d = hash(i + vec2(1.0, 1.0));
    vec2 u = f * f * (3.0 - 2.0 * f);
    return mix(mix(a, b, u.x), mix(c, d, u.x), u.y);
}

float fbm(vec2 uv) {
    float total = 0.0;
    float amplitude = 1.0;
    float frequency = 1.0;
    for (int i = 0; i < 5; i++) {
        total += valueNoise(uv * frequency) * amplitude;
        frequency *= 2.0;
        amplitude *= 0.5;
    }
    return total;
}

void mainImage(out vec4 fragColor, in vec2 fragCoord, vec2 iResolution ) {
    vec2 uv = fragCoord / iResolution.xy;
    float scale = 10.0;
    vec2 st = uv * scale;
    float n = fbm(st);
    float detail = fbm(st * 2.0 + 10.0);
    float groundPattern = 0.5 * n + 0.5 * detail;
    groundPattern = pow(groundPattern, 1.3);
    vec3 baseColor = vec3(0.2, 0.13, 0.07);
    vec3 midColor  = vec3(0.4, 0.25, 0.12);
    vec3 lightColor = vec3(0.6, 0.4, 0.2);
    vec3 color = mix(baseColor, midColor, groundPattern);
    color = mix(color, lightColor, smoothstep(0.5, 1.0, groundPattern));
    float dist = length(uv - 0.5);
    color *= (1.0 - 0.4 * dist);
    fragColor = vec4(color, 1.0);
}

void main()
{
  ivec2 uv = ivec2(gl_GlobalInvocationID.xy);

  vec4 fragCol;
  vec2 iResolution = vec2(1280.0, 720.0);

  mainImage(fragCol, uv, iResolution);

  if (uv.x < iResolution.x && uv.y < iResolution.y)
    imageStore(resultImage, uv, fragCol);
}
